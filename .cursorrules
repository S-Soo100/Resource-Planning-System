# KARS (Kangsters Auto Resource-management System) - Cursor Rules

## 기본 대화 규칙
0. 친구처럼 반말하는 어투로 일관되게 말할 것.
1. 잘 모를 경우 '모르겠습니다'라고 명확히 밝힐 것.
2. 추측일 경우 '추측입니다'라고 명시할 것.
3. 출처가 불분명한 정보는 '확실하지 않음'으로 표시할 것.
4. 단정 짓지 말고, 근거가 있다면 함께 제시할 것.
5. 애매한 질문은 먼저 맥락이나 상황을 물어볼 것.
6. 출처나 참고자료가 있다면 간단히 요약해서 알려줄 것.
7. 추론 과정을 거쳐서 좀 더 깊이 생각하고, 관련된 자료를 검토한 후에 답변할 것.
8. 맞춤형 지침: Make sure to think step-by-step when answering.
9. Always respond in 한국어

## 프로젝트 개요
KARS는 다양한 품목/창고를 가진 기업을 대상으로 하는 자동화 재고관리 시스템입니다. React, TypeScript, Next.js, Tailwind CSS를 기반으로 구축되었으며, 재고 관리, 발주 관리, 시연 관리, 휠체어 발주 등 다양한 기능을 제공합니다.

## 기술 스택 및 아키텍처

### 핵심 기술
- **프론트엔드**: React 18.2.0, TypeScript, Next.js 15.1.3
- **스타일링**: Tailwind CSS, Ant Design
- **상태 관리**: Zustand, React Query (@tanstack/react-query)
- **폼 관리**: Formik, Yup
- **API 통신**: Axios
- **인증**: JWT, js-cookie
- **UI 컴포넌트**: Lucide React, React Icons

## 코딩 규칙

### 1. 파일 및 폴더 명명 규칙

#### 컴포넌트 파일
- **PascalCase** 사용: `OrderRequestForm.tsx`, `UserManagementModal.tsx`
- 페이지 컴포넌트는 `page.tsx`로 명명
- 모달 컴포넌트는 `Modal.tsx` 접미사 사용
- 폼 컴포넌트는 `Form.tsx` 접미사 사용

#### 훅 파일
- **camelCase** 사용: `useOrder.ts`, `useAuth.ts`
- `use` 접두사 필수
- 기능별 그룹화: `(useOrder)/`, `(useDemo)/`

#### 타입 파일
- **kebab-case** 사용: `order-record.ts`, `inventory-record.ts`
- 기능별 그룹화: `(order)/`, `(auth)/`, `(inventoryRecord)/`

### 2. 컴포넌트 작성 규칙

#### 기본 구조
```typescript
import React from 'react';
import { ComponentProps } from './types';

interface ComponentNameProps {
  // props 정의
}

export const ComponentName: React.FC<ComponentNameProps> = ({ 
  // props destructuring
}) => {
  // hooks
  // handlers
  // render
};
```

#### 컴포넌트 분류
- **페이지 컴포넌트**: `src/app/` 하위의 페이지
- **공통 컴포넌트**: `src/components/common/` 재사용 가능한 컴포넌트
- **기능별 컴포넌트**: `src/components/[feature]/` 특정 기능 전용
- **UI 컴포넌트**: `src/components/ui/` 기본 UI 요소

### 4. API 및 데이터 관리

#### API 함수 구조
```typescript
// src/api/order-api.ts
export const createOrder = async (data: OrderRequest): Promise<OrderResponse> => {
  // API 호출 로직
};

export const getOrders = async (params: GetOrdersParams): Promise<OrderResponse[]> => {
  // API 호출 로직
};
```

#### React Query 사용
```typescript
// src/hooks/(useOrder)/useOrderQueries.ts
export const useOrders = (params: GetOrdersParams) => {
  return useQuery({
    queryKey: ['orders', params],
    queryFn: () => getOrders(params),
  });
};
```
#### React Query 캐시 키
- **일관된 키 구조**: `['resource', params]`
- **예시**: `['orders', { teamId, status }]`, `['users', { teamId }]`

### 6. 스타일링 규칙

#### Tailwind CSS 사용
- **기본 클래스 우선**: `flex`, `p-4`, `text-lg`
- **반응형**: `md:flex`, `lg:p-6`
- **상태별**: `hover:bg-blue-100`, `focus:ring-2`

#### 테마 색상
- **일반 기능**: 파란색 계열 (`blue-500`, `blue-600`)
- **휠체어 발주 관련 기능**: 보라색 계열 (`purple-500`, `purple-600`)
- **경고/에러**: 빨간색 계열 (`red-500`, `red-600`)

### 7. 권한 관리 규칙

#### 권한 레벨
1. **Admin**: 모든 기능 접근 가능
2. **Moderator**: 읽기 전용 관리 기능, 발주 승인
3. **User**: 기본 사용자 기능
4. **Supplier**: 발주 관련 기능만

### 8. 날짜 및 시간 처리 규칙

#### 날짜 변환 함수 작성 시
- **빈 값 처리**: 빈 문자열이나 undefined 입력 시 `undefined` 반환 (빈 문자열 반환 금지)
- **유효성 검증**: Date 객체 생성 전 반드시 유효성 검증 수행
- **타입 안전성**: 반환 타입을 `string | undefined`로 명시

#### 예시 코드
```typescript
const toKSTDateString = (dateString: string): string | undefined => {
  if (!dateString || dateString.trim() === "") return undefined;
  
  // 유효성 검증 후 변환
  const testDate = new Date(normalizedDate);
  if (isNaN(testDate.getTime())) {
    return undefined; // 빈 문자열 대신 undefined 반환
  }
  
  return `${normalizedDate}T00:00:00+09:00`;
};
```

#### 서버 전송 시
- **undefined 필드 제거**: 서버로 전송하기 전에 undefined 필드들은 반드시 제거
- **조건부 변환**: 빈 값 체크 후에만 변환 함수 호출

### 9. API 요청 데이터 검증 규칙

#### 날짜 필드 처리
- **빈 값 방지**: `new Date("")` 또는 `new Date("Invalid Date")` 방지
- **조건부 전송**: 유효한 날짜만 서버로 전송
- **디버깅 로그**: 날짜 변환 과정에서 상세한 로그 출력

#### 예시 코드
```typescript
const submitData = {
  demoPaymentDate: formData.demoPaymentDate && formData.demoPaymentDate.trim() !== "" 
    ? toKSTDateString(formData.demoPaymentDate) 
    : undefined,
};

// undefined 필드 제거
if (!submitData.demoPaymentDate) {
  delete submitData.demoPaymentDate;
}
```

### 10. 기존 데이터 호환성 규칙

#### 시간대 처리
- **형식 감지**: 기존 데이터의 시간대 형식 확인 후 적절한 변환 적용
- **이중 변환 방지**: 이미 UTC+9 형식인 데이터는 추가 변환 금지
- **안전한 변환**: 변환 불가능한 데이터는 원본 반환

#### 예시 코드
```typescript
const normalizeTimeForDisplay = (timeString: string): string => {
  // 이미 UTC+9 형식인지 확인
  if (timeString.includes("+09:00") || timeString.includes("Z")) {
    return timeString.split(/[+Z]/)[0];
  }
  
  // 일반 HH:MM 형식이면 그대로 반환
  const timeRegex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
  if (timeRegex.test(timeString)) {
    return timeString;
  }
  
  return timeString; // 변환 불가능한 경우 원본 반환
};
```

### 11. 성능 최적화 규칙

#### React Query 최적화
- **적절한 캐시 시간**: `staleTime`, `cacheTime` 설정
- **백그라운드 업데이트**: `refetchOnWindowFocus: false`
- **무한 스크롤**: `useInfiniteQuery` 사용

#### 컴포넌트 최적화
- **React.memo**: 불필요한 리렌더링 방지
- **useCallback**: 함수 메모이제이션
- **useMemo**: 계산 결과 메모이제이션

#### 필수 업데이트 문서화
1. **CHANGELOG.md 반영**
   - Keep a Changelog 형식 준수
   - Semantic Versioning 적용
   - 변경 유형별 분류 (추가됨, 변경됨, 수정됨, 개선됨, 보안 등)
   - 구체적이고 명확한 설명

2. **/update 페이지 반영**
   - `src/app/update/page.tsx` 파일 업데이트
   - 시각적 UI로 사용자 친화적 표시
   - 아이콘과 색상으로 변경 유형 구분
   - 최신 버전을 상단에 배치

3. **비즈니스 로직 변경 시 문서화**
   - `/docs` 폴더에 관련 문서 추가
   - 기존 문서 업데이트 (예: `demo-system-business-logic.md`)
   - LLM 수정 가이드라인 업데이트

#### 업데이트 작성 체크리스트
- [ ] **CHANGELOG.md** - 버전 정보, 날짜, 변경사항 상세 기록
- [ ] **/update 페이지** - 사용자 친화적 UI로 표시
- [ ] **문서화** - 비즈니스 로직 변경 시 `/docs` 문서 추가/수정

#### 작성 순서
1. **CHANGELOG.md** 먼저 작성 (기본 정보)
2. **/update 페이지** UI 업데이트 (사용자 경험)
3. **문서화** (비즈니스 로직 변경 시)


### 12. 디버깅 및 검증 규칙

#### 날짜 처리 디버깅
- **단계별 로깅**: 날짜 변환의 각 단계에서 상세한 로그 출력
- **타입 정보**: 값과 함께 타입, 길이, 빈 값 여부 등 상세 정보 기록
- **최종 데이터 확인**: 서버 전송 전 최종 데이터 구조 로깅

#### 예시 코드
```typescript
console.log("[디버깅] 날짜 필드 상세 정보:", {
  demoPaymentDate: {
    value: formData.demoPaymentDate,
    type: typeof formData.demoPaymentDate,
    length: formData.demoPaymentDate?.length,
    isEmpty: !formData.demoPaymentDate || formData.demoPaymentDate.trim() === ""
  }
});
```

## 특별 규칙

### 1. 창고 접근 권한
- `restrictedWhs` 필드로 사용자별 창고 접근 제한
- Admin은 모든 창고 접근 가능
- 다른 권한은 설정된 창고만 접근 가능

### 2. 팀 기반 데이터 격리
- 모든 데이터는 팀별로 격리
- `teamId` 필드로 데이터 필터링
- 팀 간 데이터 공유 금지

### 3. 시연 시스템 특별 규칙
- 시연 관련 기능은 `demo` 접두사 사용
- 시연 상태는 별도 관리
- 재고 연동은 자동화

### 4. 휠체어 발주 특별 규칙
- 휠체어 관련 기능은 `wheelchair` 접두사 사용
- 보라색 테마 적용
- 특정 창고 및 카테고리 제한
