# KARS (Kangsters Auto Resource-management System) - Cursor Rules

## 프로젝트 개요
KARS는 다양한 품목/창고를 가진 기업을 대상으로 하는 자동화 재고관리 시스템입니다. React, TypeScript, Next.js, Tailwind CSS를 기반으로 구축되었으며, 재고 관리, 발주 관리, 시연 관리, 휠체어 발주 등 다양한 기능을 제공합니다.

## 기술 스택 및 아키텍처

### 핵심 기술
- **프론트엔드**: React 18.2.0, TypeScript, Next.js 15.1.3
- **스타일링**: Tailwind CSS, Ant Design
- **상태 관리**: Zustand, React Query (@tanstack/react-query)
- **폼 관리**: Formik, Yup
- **API 통신**: Axios
- **인증**: JWT, js-cookie
- **UI 컴포넌트**: Lucide React, React Icons

### 프로젝트 구조
```
src/
├── app/           # Next.js App Router 페이지
├── components/    # 재사용 가능한 컴포넌트
├── hooks/         # 커스텀 훅
├── api/           # API 관련 함수
├── types/         # TypeScript 타입 정의
├── utils/         # 유틸리티 함수
├── services/      # 비즈니스 로직 서비스
├── store/         # Zustand 스토어
└── constants/     # 상수 정의
```

## 코딩 규칙

### 1. 파일 및 폴더 명명 규칙

#### 컴포넌트 파일
- **PascalCase** 사용: `OrderRequestForm.tsx`, `UserManagementModal.tsx`
- 페이지 컴포넌트는 `page.tsx`로 명명
- 모달 컴포넌트는 `Modal.tsx` 접미사 사용
- 폼 컴포넌트는 `Form.tsx` 접미사 사용

#### 훅 파일
- **camelCase** 사용: `useOrder.ts`, `useAuth.ts`
- `use` 접두사 필수
- 기능별 그룹화: `(useOrder)/`, `(useDemo)/`

#### 타입 파일
- **kebab-case** 사용: `order-record.ts`, `inventory-record.ts`
- 기능별 그룹화: `(order)/`, `(auth)/`, `(inventoryRecord)/`

### 2. 컴포넌트 작성 규칙

#### 기본 구조
```typescript
import React from 'react';
import { ComponentProps } from './types';

interface ComponentNameProps {
  // props 정의
}

export const ComponentName: React.FC<ComponentNameProps> = ({ 
  // props destructuring
}) => {
  // hooks
  // handlers
  // render
};
```

#### 컴포넌트 분류
- **페이지 컴포넌트**: `src/app/` 하위의 페이지
- **공통 컴포넌트**: `src/components/common/` 재사용 가능한 컴포넌트
- **기능별 컴포넌트**: `src/components/[feature]/` 특정 기능 전용
- **UI 컴포넌트**: `src/components/ui/` 기본 UI 요소

### 3. 타입 정의 규칙

#### 인터페이스 명명
- **PascalCase** 사용: `OrderRequest`, `UserProfile`
- API 응답 타입은 `Response` 접미사: `OrderResponse`, `UserResponse`
- 요청 타입은 `Request` 접미사: `OrderRequest`, `LoginRequest`

#### 타입 그룹화
```typescript
// src/types/(order)/order.ts
export interface Order {
  id: string;
  // ...
}

export interface OrderRequest {
  // ...
}

export interface OrderResponse {
  // ...
}
```

### 4. API 및 데이터 관리

#### API 함수 구조
```typescript
// src/api/order-api.ts
export const createOrder = async (data: OrderRequest): Promise<OrderResponse> => {
  // API 호출 로직
};

export const getOrders = async (params: GetOrdersParams): Promise<OrderResponse[]> => {
  // API 호출 로직
};
```

#### React Query 사용
```typescript
// src/hooks/(useOrder)/useOrderQueries.ts
export const useOrders = (params: GetOrdersParams) => {
  return useQuery({
    queryKey: ['orders', params],
    queryFn: () => getOrders(params),
  });
};
```

### 5. 상태 관리 규칙

#### Zustand 스토어
```typescript
// src/store/authStore.ts
interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  login: (credentials: LoginRequest) => Promise<void>;
  logout: () => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  // 상태 및 액션 정의
}));
```

#### React Query 캐시 키
- **일관된 키 구조**: `['resource', params]`
- **예시**: `['orders', { teamId, status }]`, `['users', { teamId }]`

### 6. 스타일링 규칙

#### Tailwind CSS 사용
- **기본 클래스 우선**: `flex`, `p-4`, `text-lg`
- **반응형**: `md:flex`, `lg:p-6`
- **상태별**: `hover:bg-blue-100`, `focus:ring-2`

#### 테마 색상
- **일반 기능**: 파란색 계열 (`blue-500`, `blue-600`)
- **휠체어 발주 관련 기능**: 보라색 계열 (`purple-500`, `purple-600`)
- **경고/에러**: 빨간색 계열 (`red-500`, `red-600`)

### 7. 권한 관리 규칙

#### 권한 레벨
1. **Admin**: 모든 기능 접근 가능
2. **Moderator**: 읽기 전용 관리 기능, 발주 승인
3. **User**: 기본 사용자 기능
4. **Supplier**: 발주 관련 기능만

#### 권한 체크 패턴
```typescript
// src/utils/auth.ts
export const checkPermission = (requiredLevel: PermissionLevel): boolean => {
  const userLevel = useAuthStore.getState().user?.permissionLevel;
  return permissionHierarchy[userLevel] >= permissionHierarchy[requiredLevel];
};
```

### 8. 폼 관리 규칙

#### Formik + Yup 사용
```typescript
const validationSchema = yup.object({
  itemName: yup.string().required('품목명을 입력해주세요'),
  quantity: yup.number().positive('수량은 0보다 커야 합니다'),
});

const formik = useFormik({
  initialValues,
  validationSchema,
  onSubmit: handleSubmit,
});
```

### 9. 에러 처리 규칙

#### API 에러 처리
```typescript
try {
  const response = await apiCall();
  return response.data;
} catch (error) {
  if (axios.isAxiosError(error)) {
    // API 에러 처리
    throw new Error(error.response?.data?.message || '알 수 없는 오류가 발생했습니다');
  }
  throw error;
}
```

#### 사용자 친화적 에러 메시지
- **네트워크 에러**: "네트워크 연결을 확인해주세요"
- **권한 에러**: "해당 기능에 대한 권한이 없습니다"
- **검증 에러**: 구체적인 필드별 에러 메시지

### 10. 성능 최적화 규칙

#### React Query 최적화
- **적절한 캐시 시간**: `staleTime`, `cacheTime` 설정
- **백그라운드 업데이트**: `refetchOnWindowFocus: false`
- **무한 스크롤**: `useInfiniteQuery` 사용

#### 컴포넌트 최적화
- **React.memo**: 불필요한 리렌더링 방지
- **useCallback**: 함수 메모이제이션
- **useMemo**: 계산 결과 메모이제이션

### 11. 접근성 규칙

#### 기본 접근성
- **ARIA 라벨**: 모든 입력 필드에 적절한 라벨
- **키보드 네비게이션**: Tab 순서 고려
- **색상 대비**: 충분한 색상 대비 보장
- **스크린 리더**: 의미있는 HTML 구조

### 12. 테스트 규칙

#### 테스트 파일 구조
- **컴포넌트 테스트**: `__tests__/` 폴더 또는 `.test.tsx`
- **유틸리티 테스트**: `.test.ts` 접미사
- **통합 테스트**: `integration/` 폴더

### 15. 보안 규칙

#### 인증 및 권한
- **JWT 토큰**: 안전한 토큰 관리
- **권한 검증**: 모든 API 호출 시 권한 확인
- **CSRF 보호**: 적절한 CSRF 토큰 사용

#### 데이터 검증
- **클라이언트 검증**: 사용자 경험 향상
- **서버 검증**: 보안을 위한 필수 검증
- **입력 sanitization**: XSS 공격 방지

## 특별 규칙

### 1. 창고 접근 권한
- `restrictedWhs` 필드로 사용자별 창고 접근 제한
- Admin은 모든 창고 접근 가능
- 다른 권한은 설정된 창고만 접근 가능

### 2. 팀 기반 데이터 격리
- 모든 데이터는 팀별로 격리
- `teamId` 필드로 데이터 필터링
- 팀 간 데이터 공유 금지

### 3. 시연 시스템 특별 규칙
- 데모 관련 기능은 `demo` 접두사 사용
- 시연 상태는 별도 관리
- 재고 연동은 자동화

### 4. 휠체어 발주 특별 규칙
- 휠체어 관련 기능은 `wheelchair` 접두사 사용
- 보라색 테마 적용
- 특정 창고 및 카테고리 제한

## 코드 리뷰 체크리스트

### 기능 구현
- [ ] 요구사항에 맞는 기능 구현
- [ ] 적절한 에러 처리
- [ ] 사용자 친화적 메시지
- [ ] 권한 검증 구현

### 코드 품질
- [ ] TypeScript 타입 정의
- [ ] 일관된 네이밍 컨벤션
- [ ] 적절한 주석 작성
- [ ] 불필요한 코드 제거

### 성능
- [ ] React Query 최적화
- [ ] 불필요한 리렌더링 방지
- [ ] 적절한 캐싱 전략

### 보안
- [ ] 권한 검증
- [ ] 입력 데이터 검증
- [ ] 민감한 정보 노출 방지

### 접근성
- [ ] ARIA 라벨 적용
- [ ] 키보드 네비게이션 지원
- [ ] 색상 대비 확인

이 규칙들을 따라 KARS 프로젝트의 일관성과 품질을 유지하세요. 